"""
279. 完全平方数


给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。
你需要让组成和的完全平方数的个数最少。

示例 1:
输入: n = 12
输出: 3
解释: 12 = 4 + 4 + 4.

示例 2:
输入: n = 13
输出: 2
解释: 13 = 4 + 9.
"""


class Solution:
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        while (n % 4 == 0):
            n = n // 4

        if (n % 8 == 7):
            return 4

        a = 0
        while (a**2 <= n):
            b = int((n - a * a)**0.5)
            if (a * a + b * b == n):
                if (a == 0 or b == 0):
                    return 1
                else:
                    return 2
            a = a + 1

        return 3


s = Solution()
print(s.numSquares(12))
print(s.numSquares(13))
"""
此题解法：
* 可以使用“四平方和定理”：任何一个正整数都可以表示成不超过四个整数的平方之和。
* 也就是说这个题目的答案就是 1 or 2 or 3 or 4
* “四平方和定理”有一个重要推论，如果是由4个整数的平方构成的正整数，又满足n=4^a×(8b+7)
* 因此可以把 n 去除掉4 ，研究剩余部分究竟是什么情况。
* 如果剩余部分是满足 8b+7 那么就是由4个整数构成的。
* 如果剩余部分可以由1 或 2个整数的平方构成，那么就返回1 or 2
* 如果以上均不满足，就一定是3个整数组成
"""
