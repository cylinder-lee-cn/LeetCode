"""
400. 第N个数字

在无限的整数序列 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...中找到第 n 个数字。

注意:
n 是正数且在32为整形范围内 ( n < 2^31)。

示例 1:
输入:
3
输出:
3

示例 2:
输入:
11
输出:
0

说明:
第11个数字在序列 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... 里是0，它是10的一部分。
"""


class Solution:
    def findNthDigit(self, n):
        """
        :type n: int
        :rtype: int
        """

        i = 1

        while (True):
            m = n - (9 * 10 ** (i - 1) * i)
            num = 0
            if (m <= 0):
                print(i, n)
                s, y = divmod(n, i)
                print(s, y)
                if (y == 0):
                    num = (10 ** (i - 1) + s - 1)
                else:
                    num = (10 ** (i - 1) + s)
                print(num)
                strnum = str(num)

                if (y == 0):
                    ans = strnum[-1]
                else:
                    ans = strnum[(y - 1):y]

                print(ans)
                return int(ans)
            else:
                n = m
                i = i + 1


s = Solution()

s.findNthDigit(23423409090)

"""
此题思路: 采用将所有数字转换成字符串然后拼接后进行查找的方式不可行,因为数字是无限的,必须使用纯数学的方式.

* 假设数有i位, 那i位数就有 9*10^(i-1)*i的数字长度, 例如:一位数有 9*10^0*1=9长, 两位数有9*10^1*2=180长
    三位数有9*10^2*3=2700长 .....
* 首先要知道是哪个数, 就得依次去用n减掉9*10^(i-1)*i,如果结果是 <=0 那么这个i就是几位数
* 知道是几位数以后,就要切分每个整数, 用位数来切, 还要看有没有余数(计算商和余数). 商就是基本确定是第几个i位数,
    如果有余数,那么说明是落在下一个整数上,不是当前的整数. 如果余数是0,那么正好切完整.
* 商=s, 余数=y. 那这个整数就是 10^(i-1)+s-1,如果有余数>0, 那么就是10^(i-1)+s
* 如果余数是0,那么说明正好被完整切分,所以应该返回这个整数的个位.
* 如果不为0, 1的话就是整数的最高位, 2的话次高位,依次类推


"""
