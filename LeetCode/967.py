"""
967. 连续差相同的数字

返回所有长度为 N 且满足其每两个连续位上的数字之间的差的绝对值为 K 的非负整数。

请注意，除了数字 0 本身之外，答案中的每个数字都不能有前导零。
例如，01 因为有一个前导零，所以是无效的；但 0 是有效的。

你可以按任何顺序返回答案。

示例 1：
输入：N = 3, K = 7
输出：[181,292,707,818,929]
解释：注意，070 不是一个有效的数字，因为它有前导零。

示例 2：
输入：N = 2, K = 1
输出：[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]

提示：
1 <= N <= 9
0 <= K <= 9
"""


class Solution:
    def numsSameConsecDiff(self, N, K):
        """
        :type N: int
        :type K: int
        :rtype: List[int]
        """
        init = set(range(1, 10))

        if N == 1:
            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

        # if K == 0:
        #     temp = [str(x) * N for x in range(1, 10)]
        #     return [int(x) for x in temp]

        for i in range(N - 1):
            temp = set()
            for num in init:
                n = num % 10
                big = n + K
                small = n - K
                if 0 <= big < 10:
                    temp.add(num * 10 + big)
                if 0 <= small < 10:
                    temp.add(num * 10 + small)
            init = temp
        return list(init)


s = Solution()
print(s.numsSameConsecDiff(3, 1))
# a = [
#     101, 121, 123, 210, 212, 232, 234, 321, 323, 343, 345, 432, 434, 454, 456,
#     543, 545, 565, 567, 654, 656, 676, 678, 765, 767, 787, 789, 876, 878, 898,
#     987, 989
# ]
# print(len(a))
"""
此题解法：
* 当N是1时，要么返回[]，要么返回[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]，这里返回0~9的list
* 当K是0时，返回[1……1，2……2，3……3，4……4，5……5，6……6，7……7，8……8，9……9]
* 当N>1而且K>0时，那基础数据的取值就是[1-9],遍历init，取每个数的个位，然后分别加减K值，
  如果结果在0<=r<10之间，属于合理范围，将结果作为新数值的个位，同时将这个数字放入列表中，
  循环N-1次即可完成。
"""
