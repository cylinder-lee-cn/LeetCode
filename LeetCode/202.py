"""
202. 快乐数

编写一个算法来判断一个数是不是“快乐数”。

一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，
也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。

示例:
输入: 19
输出: true
解释:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
"""


class Solution:
    def isHappy(self, n):
        """
        :type n: int
        :rtype: bool
        """
        u = set([4, 16, 37, 58, 89, 145, 42, 20])

        r = 0
        while 1:
            while (n > 0):
                n, y = divmod(n, 10)
                r = r + y ** 2
            print(r)

            if (r == 1):
                return True

            if (r in u):
                return False

            n, r = r, 0


s = Solution()
print(s.isHappy(103))

"""
此题解法: 根据Wiki上快乐数的定义和解析, 有如下结论
所有不快乐数的数位平方和的计算最后都会陷入 4->16->37->58->89->145->42->20->4这个循环
也就是说每计算一次数位平方和就要检查是否在[4,16,37,58,89,145,42,20]这个序列中.
如果是: 就要跳出循环,返回False
反之就继续计算直至为1
"""
