"""
136. 只出现一次的数字

给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:
输入: [2,2,1]
输出: 1

示例 2:
输入: [4,1,2,1,2]
输出: 4
"""


class Solution:
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        t = 0
        for n in nums:
            t = t ^ n
        return t


s = Solution()
print(s.singleNumber([1, 2, 1]))
print(s.singleNumber([4, 1, 2, 1, 2]))
"""
此题解法,参考网上: 重点是只有一个数字出现1次,其余都出现2次.
两个相同的数字做'异或'的话结果为0, 任何数字和0做'异或'的话结果还是原数.
利用这个原理就可以遍历一次数组,将元素做异或,最后的结果就是那个唯一出现一次的数!
"""
