"""
957. N 天后的牢房


8间牢房排成一排，每间牢房不是有人住就是空着。

每天，无论牢房是被占用或空置，都会根据以下规则进行更改：

如果一间牢房的两个相邻的房间都被占用或都是空的，那么该牢房就会被占用。
否则，它就会被空置。
（请注意，由于监狱中的牢房排成一行，所以行中的第一个和最后一个房间无法有两个相邻的房间。）

我们用以下方式描述监狱的当前状态：如果第 i 间牢房被占用，则 cell[i]==1，否则 cell[i]==0。

根据监狱的初始状态，在 N 天后返回监狱的状况（和上述 N 种变化）。


示例 1：
输入：cells = [0,1,0,1,1,0,0,1], N = 7
输出：[0,0,1,1,0,0,0,0]
解释：
下表概述了监狱每天的状况：
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]

示例 2：
输入：cells = [1,0,0,1,0,0,1,0], N = 1000000000
输出：[0,0,1,1,1,1,1,0]

提示：
cells.length == 8
cells[i] 的值为 0 或 1
1 <= N <= 10^9
"""


class Solution:
    def prisonAfterNDays(self, cells, N):
        """
        :type cells: List[int]
        :type N: int
        :rtype: List[int]
        """
        N = 14 if N % 14 == 0 else N % 14

        for i in range(N):
            tmp = [0] * 8
            for j in range(1, 7):
                if cells[j - 1] == cells[j + 1]:
                    tmp[j] = 1
            cells = tmp[:]
        return cells


s = Solution()
print(s.prisonAfterNDays([0, 1, 0, 1, 1, 0, 0, 1], 7))
print(s.prisonAfterNDays([1, 0, 0, 1, 0, 0, 1, 0], 1000000000))
"""
此题解法：
* 数组的变化没有难度，从第一次开始就可以首尾（0和7位）置0，只遍历1-6位
* 重要的是根据观察，这种变化是有规律的，也就是14次就会重复
* 那多次数的时候就是要看N和14的余数，只获取余数次数的状态即可。
"""
